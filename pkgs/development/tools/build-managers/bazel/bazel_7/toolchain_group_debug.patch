diff --git a/src/main/java/com/google/devtools/build/lib/skyframe/toolchains/SingleToolchainResolutionFunction.java b/src/main/java/com/google/devtools/build/lib/skyframe/toolchains/SingleToolchainResolutionFunction.java
index 933c200471..1e5bbaa44b 100644
--- a/src/main/java/com/google/devtools/build/lib/skyframe/toolchains/SingleToolchainResolutionFunction.java
+++ b/src/main/java/com/google/devtools/build/lib/skyframe/toolchains/SingleToolchainResolutionFunction.java
@@ -32,7 +32,6 @@ import com.google.devtools.build.lib.analysis.platform.PlatformInfo;
 import com.google.devtools.build.lib.analysis.platform.ToolchainTypeInfo;
 import com.google.devtools.build.lib.cmdline.Label;
 import com.google.devtools.build.lib.events.Event;
-import com.google.devtools.build.lib.events.EventHandler;
 import com.google.devtools.build.lib.server.FailureDetails.Toolchain.Code;
 import com.google.devtools.build.lib.skyframe.ConfiguredTargetKey;
 import com.google.devtools.build.lib.skyframe.toolchains.PlatformLookupUtil.InvalidPlatformException;
@@ -91,14 +90,21 @@ public class SingleToolchainResolutionFunction implements SkyFunction {
                 .debugToolchainResolution(key.toolchainType().toolchainType());
 
     // Find the right one.
-    return resolveConstraints(
+    ArrayList<String> trace = debug ? new ArrayList<>() : null;
+    SingleToolchainResolutionValue toolchainResolution = resolveConstraints(
         key.toolchainType(),
         key.toolchainTypeInfo(),
         key.availableExecutionPlatformKeys(),
         key.targetPlatformKey(),
         toolchains.registeredToolchains(),
         env,
-        debug ? env.getListener() : null);
+        trace);
+
+    if (debug) {
+        env.getListener().handle(Event.info(String.join("\n", trace)));
+    }
+
+    return toolchainResolution;
   }
 
   /**
@@ -114,7 +120,7 @@ public class SingleToolchainResolutionFunction implements SkyFunction {
       ConfiguredTargetKey targetPlatformKey,
       ImmutableList<DeclaredToolchainInfo> toolchains,
       Environment env,
-      @Nullable EventHandler eventHandler)
+      @Nullable List<String> trace)
       throws ToolchainResolutionFunctionException, InterruptedException {
 
     // Load the PlatformInfo needed to check constraints.
@@ -151,10 +157,20 @@ public class SingleToolchainResolutionFunction implements SkyFunction {
                     toolchain.toolchainType().typeLabel().equals(toolchainType.toolchainType()))
             .collect(toImmutableList());
 
+    debugMessage(
+        trace,
+        "Performing resolution of %s for target platform %s",
+        toolchainType.toolchainType(),
+        targetPlatform.label());
+
     for (DeclaredToolchainInfo toolchain : filteredToolchains) {
       // Make sure the target setting matches but watch out for resolution errors.
       ArrayList<String> nonmatchingSettings = new ArrayList<>();
       ArrayList<String> errors = new ArrayList<>();
+      debugMessage(
+          trace,
+          "  toolchain %s",
+          toolchain.toolchainLabel());
 
       // TODO(blaze-configurability-team): If this pattern comes up more often, add a central
       //   facility for merging multiple MatchResult
@@ -181,11 +197,8 @@ public class SingleToolchainResolutionFunction implements SkyFunction {
       }
       if (!nonmatchingSettings.isEmpty()) {
         debugMessage(
-            eventHandler,
-            "    Type %s: %s platform %s: Rejected toolchain %s; mismatching config settings: %s",
-            toolchainType.toolchainType(),
-            "target",
-            targetPlatform.label(),
+            trace,
+            "        Rejected toolchain %s; mismatching config settings: %s",
             toolchain.toolchainLabel(),
             String.join(", ", nonmatchingSettings));
         continue;
@@ -193,35 +206,36 @@ public class SingleToolchainResolutionFunction implements SkyFunction {
 
       // Make sure the target platform matches.
       if (!checkConstraints(
-          eventHandler,
+          trace,
           toolchain.targetConstraints(),
-          "target",
+          "        Rejected toolchain %1s%3s",
           targetPlatform,
           toolchainType,
           toolchain.toolchainLabel())) {
         continue;
       }
+    
+      debugMessage(
+          trace,
+          "        Toolchain %s is compatible with target plaform, searching for execution platforms:",
+          toolchain.toolchainLabel());
 
       // Find the matching execution platforms.
       for (ConfiguredTargetKey executionPlatformKey : availableExecutionPlatformKeys) {
         // Only check the toolchains if this is a new platform.
         if (platformKeysSeen.contains(executionPlatformKey)) {
           debugMessage(
-              eventHandler,
-              "    Type %s: target platform %s: execution platform %s: Skipping toolchain %s;"
-                  + " execution platform already has selected toolchain",
-              toolchainType.toolchainType(),
-              targetPlatform.label(),
-              executionPlatformKey.getLabel(),
-              toolchain.toolchainLabel());
+              trace,
+              "          Skipping execution platform %s; it has already selected a toolchain",
+              executionPlatformKey.getLabel());
           continue;
         }
 
         PlatformInfo executionPlatform = platforms.get(executionPlatformKey);
         if (!checkConstraints(
-            eventHandler,
+            trace,
             toolchain.execConstraints(),
-            "execution",
+            "          Incompatible execution platform %2s%3s",
             executionPlatform,
             toolchainType,
             toolchain.toolchainLabel())) {
@@ -229,51 +243,64 @@ public class SingleToolchainResolutionFunction implements SkyFunction {
         }
 
         debugMessage(
-            eventHandler,
-            "  Type %s: target platform %s: execution %s: Selected toolchain %s",
-            toolchainType.toolchainType(),
-            targetPlatform.label(),
-            executionPlatformKey.getLabel(),
-            toolchain.toolchainLabel());
+            trace,
+            "          Compatible execution platform %s",
+            executionPlatformKey.getLabel());
         builder.put(executionPlatformKey, toolchain.toolchainLabel());
         platformKeysSeen.add(executionPlatformKey);
       }
     }
 
     ImmutableMap<ConfiguredTargetKey, Label> resolvedToolchainLabels = builder.buildOrThrow();
-    if (resolvedToolchainLabels.isEmpty()) {
-      debugMessage(
-          eventHandler,
-          "  Type %s: target platform %s: No toolchains found.",
-          toolchainType.toolchainType(),
-          targetPlatform.label());
+    if (trace != null) {
+      if (resolvedToolchainLabels.isEmpty()) {
+        debugMessage(
+            trace,
+            "No %s toolchain found for target platform %s.",
+            toolchainType.toolchainType(),
+            targetPlatform.label());
+      } else {
+        debugMessage(
+            trace,
+            "Recap of selected %s toolchains for target platform %s:",
+            toolchainType.toolchainType(),
+            targetPlatform.label());
+        resolvedToolchainLabels.forEach((executionPlatformKey, toolchainLabel) ->
+            debugMessage(
+                trace,
+                "  Selected toolchain %s to run on exec platform %s",
+                toolchainLabel,
+                executionPlatformKey.getLabel())
+        );
+      }
     }
 
     return SingleToolchainResolutionValue.create(toolchainTypeInfo, resolvedToolchainLabels);
   }
 
   /**
-   * Helper method to print a debugging message, if the given {@link EventHandler} is not {@code
+   * Helper method to print a debugging message, if the given {@link trace} is not {@code
    * null}.
    */
   @FormatMethod
   private static void debugMessage(
-      @Nullable EventHandler eventHandler, @FormatString String template, Object... args) {
-    if (eventHandler == null) {
+      @Nullable List<String> trace, @FormatString String template, Object... args) {
+    if (trace == null) {
       return;
     }
 
-    eventHandler.handle(Event.info("ToolchainResolution: " + String.format(template, args)));
+    trace.add(String.format(template, args));
   }
 
   /**
    * Returns {@code true} iff all constraints set by the toolchain and in the {@link PlatformInfo}
    * match.
    */
+  @SuppressWarnings("FormatStringAnnotation")
   private static boolean checkConstraints(
-      @Nullable EventHandler eventHandler,
+      @Nullable List<String> trace,
       ConstraintCollection toolchainConstraints,
-      String platformType,
+      String debugMessage,
       PlatformInfo platform,
       ToolchainTypeRequirement toolchainType,
       Label toolchainLabel) {
@@ -295,7 +322,7 @@ public class SingleToolchainResolutionFunction implements SkyFunction {
             .filter(toolchainConstraints::hasWithoutDefault)
             .collect(ImmutableSet.toImmutableSet());
 
-    if (!mismatchSettingsWithDefault.isEmpty()) {
+    if (trace != null && !mismatchSettingsWithDefault.isEmpty()) {
       String mismatchValues =
           mismatchSettingsWithDefault.stream()
               .filter(toolchainConstraints::has)
@@ -314,14 +341,11 @@ public class SingleToolchainResolutionFunction implements SkyFunction {
         missingSettings = "; missing: " + missingSettings;
       }
       debugMessage(
-          eventHandler,
-          "    Type %s: %s platform %s: Rejected toolchain %s%s%s",
-          toolchainType.toolchainType(),
-          platformType,
-          platform.label(),
+          trace,
+          debugMessage,
           toolchainLabel,
-          mismatchValues,
-          missingSettings);
+          platform.label(),
+          mismatchValues + missingSettings);
     }
 
     return mismatchSettingsWithDefault.isEmpty();
diff --git a/src/main/java/com/google/devtools/build/lib/skyframe/toolchains/ToolchainResolutionFunction.java b/src/main/java/com/google/devtools/build/lib/skyframe/toolchains/ToolchainResolutionFunction.java
index 3bdf2d0b23..fea848eca0 100644
--- a/src/main/java/com/google/devtools/build/lib/skyframe/toolchains/ToolchainResolutionFunction.java
+++ b/src/main/java/com/google/devtools/build/lib/skyframe/toolchains/ToolchainResolutionFunction.java
@@ -80,14 +80,7 @@ public class ToolchainResolutionFunction implements SkyFunction {
           Preconditions.checkNotNull(configuration.getFragment(PlatformConfiguration.class));
 
       // Check if debug output should be generated.
-      boolean debug =
-          key.debugTarget()
-              || configuration
-                  .getFragment(PlatformConfiguration.class)
-                  .debugToolchainResolution(
-                      key.toolchainTypes().stream()
-                          .map(ToolchainTypeRequirement::toolchainType)
-                          .collect(toImmutableSet()));
+      boolean debug = key.debugTarget();
 
       // Load the configured target for the toolchain types to ensure that they are valid and
       // resolve aliases.
@@ -138,9 +131,10 @@ public class ToolchainResolutionFunction implements SkyFunction {
             .handle(
                 Event.info(
                     String.format(
-                        "ToolchainResolution: Target platform %s: Selected execution platform %s,"
+                        "ToolchainResolution: Target platform %s (%s): Selected execution platform %s, "
                             + " %s",
                         unloadedToolchainContext.targetPlatform().label(),
+                        configuration,
                         unloadedToolchainContext.executionPlatform().label(),
                         selectedToolchains)));
       }
