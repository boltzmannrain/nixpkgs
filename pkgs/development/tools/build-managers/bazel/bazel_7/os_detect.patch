diff --git a/src/main/java/com/google/devtools/build/lib/bazel/repository/starlark/StarlarkOS.java b/src/main/java/com/google/devtools/build/lib/bazel/repository/starlark/StarlarkOS.java
index 333ea07801..287760f8b6 100644
--- a/src/main/java/com/google/devtools/build/lib/bazel/repository/starlark/StarlarkOS.java
+++ b/src/main/java/com/google/devtools/build/lib/bazel/repository/starlark/StarlarkOS.java
@@ -64,6 +64,8 @@ final class StarlarkOS implements StarlarkValue {
           "A string identifying the architecture Bazel is running on (the value of the \"os.arch\""
               + " Java property converted to lower case).")
   public String getArch() {
-    return System.getProperty("os.arch").toLowerCase(Locale.ROOT);
+    String arch = System.getProperty("os.arch").toLowerCase(Locale.ROOT);
+    System.out.println("ARCH is " + arch);
+    return arch;
   }
 }
diff --git a/tools/cpp/cc_configure.bzl b/tools/cpp/cc_configure.bzl
index 56399fb4e3..a0172717b5 100644
--- a/tools/cpp/cc_configure.bzl
+++ b/tools/cpp/cc_configure.bzl
@@ -32,16 +32,20 @@ def cc_autoconf_toolchains_impl(repository_ctx):
     # Should we try to find C++ toolchain at all? If not, we don't have to generate toolchains for C++ at all.
     should_detect_cpp_toolchain = "BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN" not in env or env["BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN"] != "1"
 
+    cpu_value = get_cpu_value(repository_ctx)
+    print('cc_autoconf_toolchains_impl', "cpu_value", cpu_value)
     if should_detect_cpp_toolchain:
+        print('cc_autoconf_toolchains_impl', repository_ctx.name, "should detect")
         paths = resolve_labels(repository_ctx, [
             "@bazel_tools//tools/cpp:BUILD.toolchains.tpl",
         ])
         repository_ctx.template(
             "BUILD",
             paths["@bazel_tools//tools/cpp:BUILD.toolchains.tpl"],
-            {"%{name}": get_cpu_value(repository_ctx)},
+            {"%{name}": cpu_value},
         )
     else:
+        print('cc_autoconf_toolchains_impl', repository_ctx.name, "should NOT detect")
         repository_ctx.file("BUILD", "# C++ toolchain autoconfiguration was disabled by BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN env variable.")
 
 cc_autoconf_toolchains = repository_rule(
@@ -62,6 +66,7 @@ def cc_autoconf_impl(repository_ctx, overriden_tools = dict()):
 
     env = repository_ctx.os.environ
     cpu_value = get_cpu_value(repository_ctx)
+    print('cc_autoconf_impl', "cpu_value", cpu_value)
     if "BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN" in env and env["BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN"] == "1":
         paths = resolve_labels(repository_ctx, [
             "@bazel_tools//tools/cpp:BUILD.empty.tpl",
@@ -148,12 +153,14 @@ def cc_configure():
     cc_autoconf_toolchains(name = "local_config_cc_toolchains")
     cc_autoconf(name = "local_config_cc")
     native.bind(name = "cc_toolchain", actual = "@local_config_cc//:toolchain")
+    print('cc_configure does register')
     native.register_toolchains(
         # Use register_toolchain's target pattern expansion to register all toolchains in the package.
         "@local_config_cc_toolchains//:all",
     )
 
 def _cc_configure_extension_impl(ctx):
+    print('cc_configure_extension does NOT register')
     cc_autoconf_toolchains(name = "local_config_cc_toolchains")
     cc_autoconf(name = "local_config_cc")
 
